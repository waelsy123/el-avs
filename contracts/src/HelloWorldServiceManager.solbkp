// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.9;

import "@eigenlayer/contracts/libraries/BytesLib.sol";
import "@eigenlayer/contracts/core/DelegationManager.sol";
import "@eigenlayer-middleware/src/unaudited/ECDSAServiceManagerBase.sol";
import "@eigenlayer-middleware/src/unaudited/ECDSAStakeRegistry.sol";
import "@openzeppelin-upgrades/contracts/utils/cryptography/ECDSAUpgradeable.sol";
import "@eigenlayer/contracts/permissions/Pausable.sol";
import {IRegistryCoordinator} from "@eigenlayer-middleware/src/interfaces/IRegistryCoordinator.sol";
import "./IHelloWorldServiceManager.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

contract HelloWorldServiceManager is
    ECDSAServiceManagerBase,
    IHelloWorldServiceManager,
    Pausable
{
    using BytesLib for bytes;
    using ECDSAUpgradeable for bytes32;

    /* STORAGE */
    // The latest task index
    uint32 public latestTaskNum;

    // mapping of task indices to all tasks hashes
    // when a task is created, task hash is stored here,
    // and responses need to pass the actual task,
    // which is hashed onchain and checked against this mapping
    mapping(uint32 => bytes32) public allTaskHashes;

    // mapping of task indices to hash of abi.encode(taskResponse, taskResponseMetadata)
    mapping(address => mapping(uint32 => bytes)) public allTaskResponses;

    uint32 public latestLoanId;
    uint256 public liquidationRatio = 1 ether;
    IERC20 public debtToken;
    uint256 public debtTokenPriceInWei; // Price of 1 debt token in wei

    struct Loan {
        address borrower;
        uint256 collateralAmount; // in wei
        uint256 debtAmount; // in debt tokens
        bool isLiquidated;
    }

    mapping(uint32 => Loan) public loans;

    /* MODIFIERS */
    modifier onlyOperator() {
        require(
            ECDSAStakeRegistry(stakeRegistry).operatorRegistered(msg.sender) ==
                true,
            "Operator must be the caller"
        );
        _;
    }

    constructor(
        address _avsDirectory,
        address _stakeRegistry,
        address _delegationManager,
        address _debtToken
    )
        ECDSAServiceManagerBase(
            _avsDirectory,
            _stakeRegistry,
            address(0), // hello-world doesn't need to deal with payments
            _delegationManager
        )
    {
        debtToken = IERC20(_debtToken);
    }

    /* FUNCTIONS */
    // NOTE: this function creates new task, assigns it a taskId
    function createNewTask(string memory name) external {
        // create a new task struct
        Task memory newTask;
        newTask.name = name;
        newTask.taskCreatedBlock = uint32(block.number);

        // store hash of task onchain, emit event, and increase taskNum
        allTaskHashes[latestTaskNum] = keccak256(abi.encode(newTask));
        emit NewTaskCreated(latestTaskNum, newTask);
        latestTaskNum = latestTaskNum + 1;
    }

    // NOTE: this function responds to existing tasks.
    function respondToTask(
        Task calldata task,
        uint32 referenceTaskIndex,
        bytes calldata signature
    ) external onlyOperator {
        require(
            operatorHasMinimumWeight(msg.sender),
            "Operator does not have match the weight requirements"
        );
        // check that the task is valid, hasn't been responsed yet, and is being responded in time
        require(
            keccak256(abi.encode(task)) == allTaskHashes[referenceTaskIndex],
            "supplied task does not match the one recorded in the contract"
        );
        // some logical checks
        require(
            allTaskResponses[msg.sender][referenceTaskIndex].length == 0,
            "Operator has already responded to the task"
        );

        // The message that was signed
        bytes32 messageHash = keccak256(abi.encodePacked("Hello, ", task.name));
        bytes32 ethSignedMessageHash = messageHash.toEthSignedMessageHash();

        // Recover the signer address from the signature
        address signer = ethSignedMessageHash.recover(signature);

        require(signer == msg.sender, "Message signer is not operator");

        // updating the storage with task responses
        allTaskResponses[msg.sender][referenceTaskIndex] = signature;

        // emitting event
        emit TaskResponded(referenceTaskIndex, task, msg.sender);
    }

    // HELPER

    function operatorHasMinimumWeight(
        address operator
    ) public view returns (bool) {
        return
            ECDSAStakeRegistry(stakeRegistry).getOperatorWeight(operator) >=
            ECDSAStakeRegistry(stakeRegistry).minimumWeight();
    }

    // lending
    function setDebtTokenPriceInWei(uint256 _priceInWei) external onlyOperator {
        debtTokenPriceInWei = _priceInWei;
        emit DebtTokenPriceUpdated(_priceInWei);
    }

    function createLoan(uint256 debtAmount) external payable {
        require(msg.value > 0, "Collateral required");
        require(debtTokenPriceInWei > 0, "Debt token price not set");

        // Calculate the value of the collateral in wei and the value of the debt in wei
        uint256 collateralValueInWei = msg.value;
        uint256 debtValueInWei = debtAmount * debtTokenPriceInWei;

        // Ensure that the collateral value respects the liquidation ratio
        uint256 requiredCollateral = (debtValueInWei * liquidationRatio) /
            1 ether;
        require(
            collateralValueInWei >= requiredCollateral,
            "Insufficient collateral for the requested loan"
        );

        Loan memory newLoan = Loan({
            borrower: msg.sender,
            collateralAmount: msg.value,
            debtAmount: debtAmount,
            isLiquidated: false
        });

        loans[latestLoanId] = newLoan;
        debtToken.transfer(msg.sender, debtAmount);

        emit LoanCreated(latestLoanId, msg.sender, msg.value, debtAmount);
        latestLoanId += 1;
    }

    function payLoan(uint32 loanId) external {
        Loan storage loan = loans[loanId];

        require(!loan.isLiquidated, "Loan already liquidated");
        require(msg.sender == loan.borrower, "Only borrower can pay the loan");

        debtToken.transferFrom(msg.sender, address(this), loan.debtAmount);
        payable(msg.sender).transfer(loan.collateralAmount);
        loan.collateralAmount = 0;
        loan.debtAmount = 0;
        loan.isLiquidated = true;

        // delete loans[loanId];

        emit LoanRepaid(loanId, msg.sender);
    }

    function liquidateLoan(uint32 loanId) external onlyOperator {
        Loan storage loan = loans[loanId];

        require(!loan.isLiquidated, "Loan already liquidated");

        uint256 debtValueInWei = loan.debtAmount * debtTokenPriceInWei;
        uint256 collateralRatio = (loan.collateralAmount * 1 ether) /
            debtValueInWei;

        require(collateralRatio < liquidationRatio, "Collateral sufficient");

        // Calculate how much debt token is required to cover the loan's collateral amount
        uint256 requiredDebtTokens = loan.collateralAmount /
            debtTokenPriceInWei;

        // Operator transfers the required debt tokens to this contract
        debtToken.transferFrom(msg.sender, address(this), requiredDebtTokens);

        // Transfer the loan's collateral to the liquidator
        payable(msg.sender).transfer(loan.collateralAmount);

        loan.isLiquidated = true;

        emit LoanLiquidated(
            loanId,
            msg.sender,
            loan.collateralAmount,
            requiredDebtTokens
        );
    }

    /* EVENTS */
    event DebtTokenPriceUpdated(uint256 newPriceInWei);
    event LoanCreated(
        uint32 loanId,
        address borrower,
        uint256 collateralAmount,
        uint256 debtAmount
    );
    event LoanLiquidated(
        uint32 loanId,
        address operator,
        uint256 collateralAmount,
        uint256 debtTokensPaid
    );
    event LoanRepaid(uint32 loanId, address borrower);
}
